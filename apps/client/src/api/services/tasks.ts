/**
 * Generated by orval v6.20.0 🍺
 * Do not edit manually.
 * Task Tracker Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CreateTaskDto,
  Task,
  TaskDto,
  TasksControllerFindAllParams,
  UpdateTaskDto,
} from "./models";
import { instance } from "../instances/index";
import type { ErrorType } from "../instances/index";

export const tasksControllerCreate = (createTaskDto: CreateTaskDto) => {
  return instance<TaskDto>({
    url: `/api/tasks`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: createTaskDto,
  });
};

export const getTasksControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tasksControllerCreate>>,
    TError,
    { data: CreateTaskDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tasksControllerCreate>>,
  TError,
  { data: CreateTaskDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tasksControllerCreate>>,
    { data: CreateTaskDto }
  > = (props) => {
    const { data } = props ?? {};

    return tasksControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TasksControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof tasksControllerCreate>>
>;
export type TasksControllerCreateMutationBody = CreateTaskDto;
export type TasksControllerCreateMutationError = ErrorType<unknown>;

export const useTasksControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tasksControllerCreate>>,
    TError,
    { data: CreateTaskDto },
    TContext
  >;
}) => {
  const mutationOptions = getTasksControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const tasksControllerFindAll = (
  params: TasksControllerFindAllParams,
  signal?: AbortSignal,
) => {
  return instance<TaskDto[]>({
    url: `/api/tasks`,
    method: "get",
    params,
    signal,
  });
};

export const getTasksControllerFindAllQueryKey = (
  params: TasksControllerFindAllParams,
) => {
  return [`/api/tasks`, ...(params ? [params] : [])] as const;
};

export const getTasksControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof tasksControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params: TasksControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tasksControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTasksControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tasksControllerFindAll>>
  > = ({ signal }) => tasksControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof tasksControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TasksControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof tasksControllerFindAll>>
>;
export type TasksControllerFindAllQueryError = ErrorType<unknown>;

export const useTasksControllerFindAll = <
  TData = Awaited<ReturnType<typeof tasksControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params: TasksControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tasksControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTasksControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const tasksControllerFindOne = (id: string, signal?: AbortSignal) => {
  return instance<Task>({ url: `/api/tasks/${id}`, method: "get", signal });
};

export const getTasksControllerFindOneQueryKey = (id: string) => {
  return [`/api/tasks/${id}`] as const;
};

export const getTasksControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof tasksControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tasksControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTasksControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tasksControllerFindOne>>
  > = ({ signal }) => tasksControllerFindOne(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof tasksControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TasksControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof tasksControllerFindOne>>
>;
export type TasksControllerFindOneQueryError = ErrorType<unknown>;

export const useTasksControllerFindOne = <
  TData = Awaited<ReturnType<typeof tasksControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tasksControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTasksControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const tasksControllerUpdate = (
  id: string,
  updateTaskDto: UpdateTaskDto,
) => {
  return instance<TaskDto>({
    url: `/api/tasks/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: updateTaskDto,
  });
};

export const getTasksControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tasksControllerUpdate>>,
    TError,
    { id: string; data: UpdateTaskDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tasksControllerUpdate>>,
  TError,
  { id: string; data: UpdateTaskDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tasksControllerUpdate>>,
    { id: string; data: UpdateTaskDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return tasksControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type TasksControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof tasksControllerUpdate>>
>;
export type TasksControllerUpdateMutationBody = UpdateTaskDto;
export type TasksControllerUpdateMutationError = ErrorType<unknown>;

export const useTasksControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tasksControllerUpdate>>,
    TError,
    { id: string; data: UpdateTaskDto },
    TContext
  >;
}) => {
  const mutationOptions = getTasksControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const tasksControllerRemove = (id: string) => {
  return instance<TaskDto>({ url: `/api/tasks/${id}`, method: "delete" });
};

export const getTasksControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tasksControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof tasksControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tasksControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return tasksControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type TasksControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof tasksControllerRemove>>
>;

export type TasksControllerRemoveMutationError = ErrorType<unknown>;

export const useTasksControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tasksControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const mutationOptions = getTasksControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};
