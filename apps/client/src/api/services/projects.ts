/**
 * Generated by orval v6.20.0 🍺
 * Do not edit manually.
 * Task Tracker Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CreateProjectDto,
  Project,
  ProjectDto,
  UpdateProjectDto,
} from "./models";
import { instance } from "../instances/index";
import type { ErrorType } from "../instances/index";

export const projectsControllerCreate = (
  createProjectDto: CreateProjectDto,
) => {
  return instance<ProjectDto>({
    url: `/api/projects`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: createProjectDto,
  });
};

export const getProjectsControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectsControllerCreate>>,
    TError,
    { data: CreateProjectDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof projectsControllerCreate>>,
  TError,
  { data: CreateProjectDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof projectsControllerCreate>>,
    { data: CreateProjectDto }
  > = (props) => {
    const { data } = props ?? {};

    return projectsControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProjectsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof projectsControllerCreate>>
>;
export type ProjectsControllerCreateMutationBody = CreateProjectDto;
export type ProjectsControllerCreateMutationError = ErrorType<unknown>;

export const useProjectsControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectsControllerCreate>>,
    TError,
    { data: CreateProjectDto },
    TContext
  >;
}) => {
  const mutationOptions = getProjectsControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const projectsControllerFindAll = (signal?: AbortSignal) => {
  return instance<ProjectDto[]>({
    url: `/api/projects`,
    method: "get",
    signal,
  });
};

export const getProjectsControllerFindAllQueryKey = () => {
  return [`/api/projects`] as const;
};

export const getProjectsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof projectsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof projectsControllerFindAll>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProjectsControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof projectsControllerFindAll>>
  > = ({ signal }) => projectsControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof projectsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProjectsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof projectsControllerFindAll>>
>;
export type ProjectsControllerFindAllQueryError = ErrorType<unknown>;

export const useProjectsControllerFindAll = <
  TData = Awaited<ReturnType<typeof projectsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof projectsControllerFindAll>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getProjectsControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const projectsControllerFindOne = (id: string, signal?: AbortSignal) => {
  return instance<Project>({
    url: `/api/projects/${id}`,
    method: "get",
    signal,
  });
};

export const getProjectsControllerFindOneQueryKey = (id: string) => {
  return [`/api/projects/${id}`] as const;
};

export const getProjectsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof projectsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof projectsControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProjectsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof projectsControllerFindOne>>
  > = ({ signal }) => projectsControllerFindOne(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof projectsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProjectsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof projectsControllerFindOne>>
>;
export type ProjectsControllerFindOneQueryError = ErrorType<unknown>;

export const useProjectsControllerFindOne = <
  TData = Awaited<ReturnType<typeof projectsControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof projectsControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getProjectsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const projectsControllerUpdate = (
  id: string,
  updateProjectDto: UpdateProjectDto,
) => {
  return instance<ProjectDto>({
    url: `/api/projects/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: updateProjectDto,
  });
};

export const getProjectsControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectsControllerUpdate>>,
    TError,
    { id: string; data: UpdateProjectDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof projectsControllerUpdate>>,
  TError,
  { id: string; data: UpdateProjectDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof projectsControllerUpdate>>,
    { id: string; data: UpdateProjectDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return projectsControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProjectsControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof projectsControllerUpdate>>
>;
export type ProjectsControllerUpdateMutationBody = UpdateProjectDto;
export type ProjectsControllerUpdateMutationError = ErrorType<unknown>;

export const useProjectsControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectsControllerUpdate>>,
    TError,
    { id: string; data: UpdateProjectDto },
    TContext
  >;
}) => {
  const mutationOptions = getProjectsControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const projectsControllerRemove = (id: string) => {
  return instance<ProjectDto>({ url: `/api/projects/${id}`, method: "delete" });
};

export const getProjectsControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof projectsControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof projectsControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return projectsControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProjectsControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof projectsControllerRemove>>
>;

export type ProjectsControllerRemoveMutationError = ErrorType<unknown>;

export const useProjectsControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const mutationOptions = getProjectsControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};
