//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    output = "../node_modules/.prisma/client"
    previewFeatures = ["extendedWhereUnique","fieldReference"]
}

generator nestjsDto {
    provider = "prisma-generator-nestjs-dto"
    output = "../src/libs/models"
    outputToNestJsResourceStructure = "false"
    flatResourceStructure = "false"
    exportRelationModifierClasses = "true"
    reExport = "true"
    createDtoPrefix = "Create"
    updateDtoPrefix = "Update"
    dtoSuffix = "Dto"
    entityPrefix = ""
    entitySuffix = ""
    classValidation = "true"
    fileNamingStyle = "camel"
    noDependencies = "false"
    outputType = "class"
    definiteAssignmentAssertion = "false"
    requiredResponseApiProperty = "true"
    prettier = "true"
}

enum Role {
    ADMIN
    MANAGER
    USER
}

/// @@allow('all', true)
model User {
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    id String @id() @default(uuid())
    email String @unique()
    firstName String
    lastName String
    /// @DtoCreateOptional
    /// @DtoUpdateOptional
    role Role @default(USER)
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    createdAt DateTime @default(now())
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    updatedAt DateTime @updatedAt()
    assignedProjects UsersOnProjects[]
    assignedTasks UsersOnTasks[]
}

/// @@allow('all', true)
model Project {
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    id String @id() @default(uuid())
    name String
    description String
    status String
    startDate DateTime @db.Date()
    endDate DateTime @db.Date()
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    createdAt DateTime @default(now())
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    updatedAt DateTime @updatedAt()
    assignedUsers UsersOnProjects[]
    tasks Task[]
}

/// @@allow('all', true)
model UsersOnProjects {
    /// @DtoRelationIncludeId
    userId String
    /// @DtoRelationIncludeId
    projectId String
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    createdAt DateTime @default(now())
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    updatedAt DateTime @updatedAt()
    project Project @relation(fields: [projectId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@id([userId, projectId])
}

/// @@allow('all', true)
model Task {
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    id String @id() @default(uuid())
    name String
    description String
    status String
    priority String
    startDate DateTime @db.Date()
    endDate DateTime @db.Date()
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    createdAt DateTime @default(now())
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    updatedAt DateTime @updatedAt()
    /// @DtoRelationIncludeId
    projectId String
    project Project @relation(fields: [projectId], references: [id])
    assignedUsers UsersOnTasks[]
}

/// @@allow('all', true)
model UsersOnTasks {
    /// @DtoRelationIncludeId
    userId String
    /// @DtoRelationIncludeId
    taskId String
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    createdAt DateTime @default(now())
    /// @DtoCreateHidden
    /// @DtoUpdateHidden
    updatedAt DateTime @updatedAt()
    task Task @relation(fields: [taskId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@id([userId, taskId])
}